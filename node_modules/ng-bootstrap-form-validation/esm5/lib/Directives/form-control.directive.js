/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, HostBinding, Optional, Host, SkipSelf, Inject } from "@angular/core";
import { ControlContainer } from "@angular/forms";
import { BootstrapVersion } from "../Enums/BootstrapVersion";
import { BOOTSTRAP_VERSION } from "../Tokens/tokens";
/**
 * @param {?} name
 * @param {?} parent
 * @return {?}
 */
export function controlPath(name, parent) {
    // tslint:disable-next-line:no-non-null-assertion
    return tslib_1.__spread(/** @type {?} */ ((parent.path)), [name]);
}
var FormControlDirective = /** @class */ (function () {
    function FormControlDirective(
    // this value might be null, but we union type it as such until
    // this issue is resolved: https://github.com/angular/angular/issues/25544
    parent, bootstrapVersion) {
        this.parent = parent;
        this.bootstrapVersion = bootstrapVersion;
    }
    Object.defineProperty(FormControlDirective.prototype, "validClass", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.control) {
                return false;
            }
            return (this.bootstrapFour &&
                this.control.valid &&
                (this.control.touched || this.control.dirty));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "invalidClass", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.control) {
                return false;
            }
            return (this.bootstrapFour &&
                this.control.invalid &&
                this.control.touched &&
                this.control.dirty);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "path", {
        get: /**
         * @return {?}
         */
        function () {
            return controlPath(this.formControlName, this.parent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "control", {
        get: /**
         * @return {?}
         */
        function () {
            return this.formDirective && this.formDirective.getControl(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "formDirective", {
        get: /**
         * @return {?}
         */
        function () {
            return this.parent ? this.parent.formDirective : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlDirective.prototype, "bootstrapFour", {
        get: /**
         * @return {?}
         */
        function () {
            return this.bootstrapVersion === BootstrapVersion.Four;
        },
        enumerable: true,
        configurable: true
    });
    FormControlDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: ".form-control,.form-check-input,.custom-control-input"
                },] },
    ];
    /** @nocollapse */
    FormControlDirective.ctorParameters = function () { return [
        { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf }] },
        { type: BootstrapVersion, decorators: [{ type: Inject, args: [BOOTSTRAP_VERSION,] }] }
    ]; };
    FormControlDirective.propDecorators = {
        formControlName: [{ type: Input }],
        formControl: [{ type: Input }],
        validClass: [{ type: HostBinding, args: ["class.is-valid",] }],
        invalidClass: [{ type: HostBinding, args: ["class.is-invalid",] }]
    };
    return FormControlDirective;
}());
export { FormControlDirective };
if (false) {
    /** @type {?} */
    FormControlDirective.prototype.formControlName;
    /** @type {?} */
    FormControlDirective.prototype.formControl;
    /** @type {?} */
    FormControlDirective.prototype.parent;
    /** @type {?} */
    FormControlDirective.prototype.bootstrapVersion;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLWJvb3RzdHJhcC1mb3JtLXZhbGlkYXRpb24vIiwic291cmNlcyI6WyJsaWIvRGlyZWN0aXZlcy9mb3JtLWNvbnRyb2wuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxLQUFLLEVBQ0wsV0FBVyxFQUNYLFFBQVEsRUFDUixJQUFJLEVBQ0osUUFBUSxFQUNSLE1BQU0sRUFDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZ0JBQWdCLEVBQWUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7Ozs7O0FBRXJELE1BQU0sc0JBQXNCLElBQVksRUFBRSxNQUF3Qjs7SUFFaEUsTUFBTSxxQ0FBSyxNQUFNLENBQUMsSUFBSSxLQUFHLElBQUksR0FBRTtDQUNoQzs7SUFxREM7OztJQU1VLE1BQXdCLEVBQ0csZ0JBQWtDO1FBRDdELFdBQU0sR0FBTixNQUFNLENBQWtCO1FBQ0cscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtLQUNuRTtJQWpESixzQkFDSSw0Q0FBVTs7OztRQURkO1lBRUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFDbEIsTUFBTSxDQUFDLEtBQUssQ0FBQzthQUNkO1lBQ0QsTUFBTSxDQUFDLENBQ0wsSUFBSSxDQUFDLGFBQWE7Z0JBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSztnQkFDbEIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUM3QyxDQUFDO1NBQ0g7OztPQUFBO0lBRUQsc0JBQ0ksOENBQVk7Ozs7UUFEaEI7WUFFRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUNsQixNQUFNLENBQUMsS0FBSyxDQUFDO2FBQ2Q7WUFDRCxNQUFNLENBQUMsQ0FDTCxJQUFJLENBQUMsYUFBYTtnQkFDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPO2dCQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU87Z0JBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUNuQixDQUFDO1NBQ0g7OztPQUFBO0lBRUQsc0JBQUksc0NBQUk7Ozs7UUFBUjtZQUNFLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkQ7OztPQUFBO0lBRUQsc0JBQUkseUNBQU87Ozs7UUFBWDtZQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2xFOzs7T0FBQTtJQUVELHNCQUFJLCtDQUFhOzs7O1FBQWpCO1lBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7U0FDdkQ7OztPQUFBO0lBRUQsc0JBQUksK0NBQWE7Ozs7UUFBakI7WUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixLQUFLLGdCQUFnQixDQUFDLElBQUksQ0FBQztTQUN4RDs7O09BQUE7O2dCQWpERixTQUFTLFNBQUM7O29CQUVULFFBQVEsRUFBRSx1REFBdUQ7aUJBQ2xFOzs7O2dCQVpRLGdCQUFnQix1QkErRHBCLFFBQVEsWUFDUixJQUFJLFlBQ0osUUFBUTtnQkFoRUosZ0JBQWdCLHVCQWtFcEIsTUFBTSxTQUFDLGlCQUFpQjs7O2tDQXJEMUIsS0FBSzs4QkFFTCxLQUFLOzZCQUdMLFdBQVcsU0FBQyxnQkFBZ0I7K0JBWTVCLFdBQVcsU0FBQyxrQkFBa0I7OytCQXhDakM7O1NBc0JhLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgSW5wdXQsXG4gIEhvc3RCaW5kaW5nLFxuICBPcHRpb25hbCxcbiAgSG9zdCxcbiAgU2tpcFNlbGYsXG4gIEluamVjdFxufSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgQ29udHJvbENvbnRhaW5lciwgRm9ybUNvbnRyb2wgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcbmltcG9ydCB7IEJvb3RzdHJhcFZlcnNpb24gfSBmcm9tIFwiLi4vRW51bXMvQm9vdHN0cmFwVmVyc2lvblwiO1xuaW1wb3J0IHsgQk9PVFNUUkFQX1ZFUlNJT04gfSBmcm9tIFwiLi4vVG9rZW5zL3Rva2Vuc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29udHJvbFBhdGgobmFtZTogc3RyaW5nLCBwYXJlbnQ6IENvbnRyb2xDb250YWluZXIpOiBzdHJpbmdbXSB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1ub24tbnVsbC1hc3NlcnRpb25cbiAgcmV0dXJuIFsuLi5wYXJlbnQucGF0aCEsIG5hbWVdO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmRpcmVjdGl2ZS1zZWxlY3RvclxuICBzZWxlY3RvcjogXCIuZm9ybS1jb250cm9sLC5mb3JtLWNoZWNrLWlucHV0LC5jdXN0b20tY29udHJvbC1pbnB1dFwiXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1Db250cm9sRGlyZWN0aXZlIHtcbiAgQElucHV0KClcbiAgZm9ybUNvbnRyb2xOYW1lOiBzdHJpbmc7XG4gIEBJbnB1dCgpXG4gIGZvcm1Db250cm9sOiBzdHJpbmc7XG5cbiAgQEhvc3RCaW5kaW5nKFwiY2xhc3MuaXMtdmFsaWRcIilcbiAgZ2V0IHZhbGlkQ2xhc3MoKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRyb2wpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuYm9vdHN0cmFwRm91ciAmJlxuICAgICAgdGhpcy5jb250cm9sLnZhbGlkICYmXG4gICAgICAodGhpcy5jb250cm9sLnRvdWNoZWQgfHwgdGhpcy5jb250cm9sLmRpcnR5KVxuICAgICk7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoXCJjbGFzcy5pcy1pbnZhbGlkXCIpXG4gIGdldCBpbnZhbGlkQ2xhc3MoKSB7XG4gICAgaWYgKCF0aGlzLmNvbnRyb2wpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuYm9vdHN0cmFwRm91ciAmJlxuICAgICAgdGhpcy5jb250cm9sLmludmFsaWQgJiZcbiAgICAgIHRoaXMuY29udHJvbC50b3VjaGVkICYmXG4gICAgICB0aGlzLmNvbnRyb2wuZGlydHlcbiAgICApO1xuICB9XG5cbiAgZ2V0IHBhdGgoKSB7XG4gICAgcmV0dXJuIGNvbnRyb2xQYXRoKHRoaXMuZm9ybUNvbnRyb2xOYW1lLCB0aGlzLnBhcmVudCk7XG4gIH1cblxuICBnZXQgY29udHJvbCgpOiBGb3JtQ29udHJvbCB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybURpcmVjdGl2ZSAmJiB0aGlzLmZvcm1EaXJlY3RpdmUuZ2V0Q29udHJvbCh0aGlzKTtcbiAgfVxuXG4gIGdldCBmb3JtRGlyZWN0aXZlKCk6IGFueSB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQuZm9ybURpcmVjdGl2ZSA6IG51bGw7XG4gIH1cblxuICBnZXQgYm9vdHN0cmFwRm91cigpIHtcbiAgICByZXR1cm4gdGhpcy5ib290c3RyYXBWZXJzaW9uID09PSBCb290c3RyYXBWZXJzaW9uLkZvdXI7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICAvLyB0aGlzIHZhbHVlIG1pZ2h0IGJlIG51bGwsIGJ1dCB3ZSB1bmlvbiB0eXBlIGl0IGFzIHN1Y2ggdW50aWxcbiAgICAvLyB0aGlzIGlzc3VlIGlzIHJlc29sdmVkOiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8yNTU0NFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEhvc3QoKVxuICAgIEBTa2lwU2VsZigpXG4gICAgcHJpdmF0ZSBwYXJlbnQ6IENvbnRyb2xDb250YWluZXIsXG4gICAgQEluamVjdChCT09UU1RSQVBfVkVSU0lPTikgcHJpdmF0ZSBib290c3RyYXBWZXJzaW9uOiBCb290c3RyYXBWZXJzaW9uXG4gICkge31cbn1cbiJdfQ==